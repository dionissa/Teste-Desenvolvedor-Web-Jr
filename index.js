// Criar uma fun√ß√£o que vai imprimir esses valores de 1 at√© 50
function printOneToFifty() {
    // Criei aqui um for que vai ir de 0 at√© 50
    for (let i = 0; i <= 50; i++) {
        // Primeira condi√ß√£o vai ser verificar se √© divis√≠vel por 3 e 5 juntos, se for, o resto ser√° 0 e vai entrar nesse escopo
        if (i%3 == 0 && i%5 == 0){
            console.log("FizzBuzz")
        } 
        // Caso n√£o seja, vai checar agora se √© divis√≠vel apenas por 3. Se for imprimir√° Fizz
        else if (i%3 == 0) {
            console.log("Fizz")
        } 
        // Checar√° por √∫ltimo se √© divis√≠vel por 5, sendo, imprimir√° Buzz
        else if (i%5 == 0){
            console.log("Buzz")
        }
        // Se n√£o for divis√≠vel nem por 3 nem por 5, ir√° somente mostrar o n√∫mero normalmente.
        else {
            console.log(i)
        }
    }
}
console.log("Resolu√ß√£o do teste üëåüèΩIZI:")
// Chamando a fun√ß√£o para teste:
printOneToFifty()

function fibonacciMaker(number) {
    // Criar uma array inicial com os dois primeiros n√∫meros que iniciam a sequ√™ncia
    const initialNumbers = [0, 1];

    // Precisamos agora criar um loop que vai passar por todos os n√∫meros da sequ√™ncia
    // Aqui j√° iremos definir o i que normalmente √© 0 para 2, porque o 0 e 1 j√° est√£o na nossa lista.
    // A condi√ß√£o aqui √© que i seja menor que o n√∫mero que foi passado no argumento.
    // Por √∫ltimo, incrementamos o i normalmente para ir at√© o n√∫mero desejado da sequ√™ncia
    for (let i = 2; i < number; i++) {
        // Criamos aqui uma constante que vai ser o pr√≥ximo n√∫mero da sequ√™ncia, onde segue a seguinte l√≥gica:
        // Vai pegar sempre o √∫ltimo n√∫mero da array e somar com o pen√∫ltimo n√∫mero da array, por exemplo,
        // no primeiro caso onde i √© igual 2 menos 1, nosso index seria 1, que √© o √∫ltimo item at√© ent√£o da lista e ser√° somando
        // com o i que √© 2, menos 2, que dar√° 0, ou seja, o index 0 do nosso array inicial que √© o pen√∫ltimo item.
        // Isso sempre vai se repetir, sempre ser√° uma soma do pen√∫ltimo com o √∫ltimo item da array.
        const nextNumber = initialNumbers[i - 1] + initialNumbers[i - 2];
        // Depois que √© feito a soma, inserimos esse n√∫mero criado no √∫ltimo lugar da nossa array e retomamos o loop.
        initialNumbers.push(nextNumber);
    }
    // No final do loop, retornamos todos os valores para nossa array inicial.
    return initialNumbers;
}

// Imprimindo os primeiros 40 n√∫meros da sequ√™ncia de Fibonacci
console.log("Resolu√ß√£o do teste üòé NATTY: ")
console.log(fibonacciMaker(40));

// Resolu√ß√£o do Teste üí£ FAKE NATTY:

// Fun√ß√£o para calcular a pontua√ß√£o de cada piloto em uma corrida de acordo com o sistema de pontua√ß√£o que for dado no argumento
function calcularPontuacao(resultados, sistemaPontuacao) {
  // Criado uma array com os pontos que ser√£o passados
  const pontos = Array(resultados[0].length).fill(0);

  // Iterar um loop onde vai adicionar os resultados com o sistema de pontua√ß√£o
  for (let i = 0; i < sistemaPontuacao[0]; i++) {
      pontos[resultados[i] - 1] += sistemaPontuacao[1][i];
  }

  return pontos;
}

// Fun√ß√£o para encontrar o Campe√£o Mundial de Pilotos para um determinado sistema de pontua√ß√£o
function encontrarCampeao(resultados, sistemasPontuacao) {
  let melhorPontuacao = 0;
  let campeoes = [];

  for (const sistemaPontuacao of sistemasPontuacao) {
      let pontuacoes = Array(resultados[0].length).fill(0);

      // Calcular a pontua√ß√£o para cada corrida
      for (const corrida of resultados) {
          const pontosCorrida = calcularPontuacao(corrida, sistemaPontuacao);
          pontuacoes = pontuacoes.map((ponto, index) => ponto + pontosCorrida[index]);
      }

      const pontuacaoMaxima = Math.max(...pontuacoes);

      // Atualizar o Campe√£o Mundial de Pilotos se a pontua√ß√£o for maior
      if (pontuacaoMaxima > melhorPontuacao) {
          melhorPontuacao = pontuacaoMaxima;
          campeoes = pontuacoes.reduce((acumulador, ponto, index) => {
              if (ponto === pontuacaoMaxima) {
                  acumulador.push(index + 1); // Adicionar piloto ao array de campe√µes
              }
              return acumulador;
          }, []);
      }
  }

  return campeoes;
}

// Para dar um exemplo dele funcionando precisaria da string para entender melhor como √© passado os resultados e se est√° funcionando
// Como n√£o tinha ela preparada, acabei n√£o testando e ficou um pouco confuso de entender o que era solicitado, tentei fazer
// com as informa√ß√µes que foram passadas no enunciado.